#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Minigun_Athena

#include "Basic.hpp"

#include "B_Ranged_Generic_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Minigun_Athena.B_Minigun_Athena_C
// 0x0060 (0x0EA0 - 0x0E40)
class AB_Minigun_Athena_C final : public AB_Ranged_Generic_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Minigun_Athena_C;                 // 0x0E40(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BarrelGlowFX;                                      // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpinUpSound;                                       // 0x0E50(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpinDownSound;                                     // 0x0E58(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_MinigunChargeUp;                                 // 0x0E60(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SpinUpAudioVolume_Volume_Multiplier_9432EB6749F26F646D08C787C7E56ED4; // 0x0E68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpinUpAudioVolume__Direction_9432EB6749F26F646D08C787C7E56ED4; // 0x0E6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D65[0x3];                                     // 0x0E6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpinUpAudioVolume;                                 // 0x0E70(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelGlow_MuzzleGlowOpacity_6AA244864FFB6D03BB4DAA82CADCA13E; // 0x0E78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BarrelGlow__Direction_6AA244864FFB6D03BB4DAA82CADCA13E; // 0x0E7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D66[0x3];                                     // 0x0E7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BarrelGlow;                                        // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MuzzleGlowMID;                                     // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentSpinAudioComponent;                         // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinVolumeMultiplier;                              // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayedSpinDownAudio;                              // 0x0E9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayedSpinUpAudio;                                // 0x0E9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETimelineDirection                            CurrentSpinDirection;                              // 0x0E9E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayedSpinSound;                                  // 0x0E9F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Minigun_Athena(int32 EntryPoint);
	void Start_Spin_Down_Audio();
	void Start_Spin_Up_Audio();
	void StopBarrelGlow();
	void MakeBarrelGlow();
	void OnInitCosmeticAlterations(const struct FFortCosmeticModification& CosmeticMod, class UMaterialInstanceDynamic* DynamicMaterialInstance);
	void OnChargeDown();
	void OnChargeUp();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void SpinUpAudioVolume__UpdateFunc();
	void SpinUpAudioVolume__FinishedFunc();
	void BarrelGlow__UpdateFunc();
	void BarrelGlow__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Minigun_Athena_C">();
	}
	static class AB_Minigun_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Minigun_Athena_C>();
	}
};
static_assert(alignof(AB_Minigun_Athena_C) == 0x000008, "Wrong alignment on AB_Minigun_Athena_C");
static_assert(sizeof(AB_Minigun_Athena_C) == 0x000EA0, "Wrong size on AB_Minigun_Athena_C");
static_assert(offsetof(AB_Minigun_Athena_C, UberGraphFrame_B_Minigun_Athena_C) == 0x000E40, "Member 'AB_Minigun_Athena_C::UberGraphFrame_B_Minigun_Athena_C' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, BarrelGlowFX) == 0x000E48, "Member 'AB_Minigun_Athena_C::BarrelGlowFX' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinUpSound) == 0x000E50, "Member 'AB_Minigun_Athena_C::SpinUpSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinDownSound) == 0x000E58, "Member 'AB_Minigun_Athena_C::SpinDownSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, P_MinigunChargeUp) == 0x000E60, "Member 'AB_Minigun_Athena_C::P_MinigunChargeUp' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinUpAudioVolume_Volume_Multiplier_9432EB6749F26F646D08C787C7E56ED4) == 0x000E68, "Member 'AB_Minigun_Athena_C::SpinUpAudioVolume_Volume_Multiplier_9432EB6749F26F646D08C787C7E56ED4' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinUpAudioVolume__Direction_9432EB6749F26F646D08C787C7E56ED4) == 0x000E6C, "Member 'AB_Minigun_Athena_C::SpinUpAudioVolume__Direction_9432EB6749F26F646D08C787C7E56ED4' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinUpAudioVolume) == 0x000E70, "Member 'AB_Minigun_Athena_C::SpinUpAudioVolume' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, BarrelGlow_MuzzleGlowOpacity_6AA244864FFB6D03BB4DAA82CADCA13E) == 0x000E78, "Member 'AB_Minigun_Athena_C::BarrelGlow_MuzzleGlowOpacity_6AA244864FFB6D03BB4DAA82CADCA13E' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, BarrelGlow__Direction_6AA244864FFB6D03BB4DAA82CADCA13E) == 0x000E7C, "Member 'AB_Minigun_Athena_C::BarrelGlow__Direction_6AA244864FFB6D03BB4DAA82CADCA13E' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, BarrelGlow) == 0x000E80, "Member 'AB_Minigun_Athena_C::BarrelGlow' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, MuzzleGlowMID) == 0x000E88, "Member 'AB_Minigun_Athena_C::MuzzleGlowMID' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, CurrentSpinAudioComponent) == 0x000E90, "Member 'AB_Minigun_Athena_C::CurrentSpinAudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinVolumeMultiplier) == 0x000E98, "Member 'AB_Minigun_Athena_C::SpinVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, bPlayedSpinDownAudio) == 0x000E9C, "Member 'AB_Minigun_Athena_C::bPlayedSpinDownAudio' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, bPlayedSpinUpAudio) == 0x000E9D, "Member 'AB_Minigun_Athena_C::bPlayedSpinUpAudio' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, CurrentSpinDirection) == 0x000E9E, "Member 'AB_Minigun_Athena_C::CurrentSpinDirection' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, bPlayedSpinSound) == 0x000E9F, "Member 'AB_Minigun_Athena_C::bPlayedSpinSound' has a wrong offset!");

}

